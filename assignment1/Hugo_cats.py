{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 243,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pickle as pkl\n",
    "import random\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "metadata": {},
   "outputs": [],
   "source": [
    "def sigmoid(z):\n",
    "    return 1.0 / (1.0 + np.exp(-z))\n",
    "\n",
    "def lrloss(yhat, y):\n",
    "    return 0.0 if yhat == y else -1.0*(y*np.log(yhat)+(1-y)*np.log(1-yhat))\n",
    "\n",
    "def lrpredict(self, x):\n",
    "    return 1 if self(x)>0.5 else 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Cat_Model:\n",
    "    \n",
    "    def lrpredict(self, x):\n",
    "        return 1 if self(x)>0.5 else 0\n",
    "\n",
    "    def __init__(self, dimension=12288, weights=None, bias=None, activation=(lambda x: x), predict=lrpredict):\n",
    "\n",
    "        self._dim = dimension\n",
    "        self.w = weights or np.random.normal(size=self._dim)\n",
    "        self.w = np.array(self.w)*np.sqrt(1/dimension)\n",
    "        self.b = bias if bias is not None else np.random.normal()\n",
    "        self._a = activation\n",
    "        self.predict = predict.__get__(self)\n",
    "\n",
    "    def __str__(self):\n",
    "        return \"Simple cell neuron\\n\\\n",
    "        \\tInput dimension: %d\\n\\\n",
    "        \\tBias: %f\\n\\\n",
    "        \\tWeights: %s\\n\\\n",
    "        \\tActivation: %s\" % (self._dim, self.b, self.w, self._a.__name__)\n",
    "\n",
    "    def __call__(self, x):\n",
    "\n",
    "        yhat = self._a(np.dot(self.w, np.reshape(x, x.size)) + self.b)\n",
    "        return yhat\n",
    "\n",
    "    def load_model(self, file_path):\n",
    "        \n",
    "        with open(file_path, mode='rb')as f:\n",
    "            mm = pkl.load(f)\n",
    "            \n",
    "            self._dim = mm._dim\n",
    "            self.w = mm.w\n",
    "            self.b = mm.b\n",
    "            self._a = mm._a\n",
    "\n",
    "    def save_model(self):\n",
    "        pickle_out = open(\"cat_model.pkl\",\"wb\")\n",
    "        pickle.dump(model, pickle_out)\n",
    "        pickle_out.close() \n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Cat_Trainer:\n",
    "\n",
    "    def __init__(self, dataset, model):\n",
    "        \n",
    "        self.dataset = dataset\n",
    "        self.model = model\n",
    "        self.loss = lrloss\n",
    "\n",
    "    def accuracy(self, data):\n",
    "\n",
    "        acc = 100*np.mean([1 if self.model.predict(x) == y else 0 for x, y in data])\n",
    "        return acc\n",
    "\n",
    "    def train(self, lr, ne):\n",
    "        \n",
    "        print(\"training model on data...\")\n",
    "        accuracy = self.accuracy(self.dataset)\n",
    "        print(\"initial accuracy: %.3f\" % (accuracy))\n",
    "        \n",
    "        costs=[ ]\n",
    "        accuracies=[ ]\n",
    "        \n",
    "        for epoch in range(1, ne+1):\n",
    "            \n",
    "            self.dataset.shuffle()\n",
    "            J = 0\n",
    "            dw = 0\n",
    "            for d in self.dataset:\n",
    "                xi, yi = d\n",
    "                yhat = self.model(xi)\n",
    "                J += self.loss(yhat, yi)\n",
    "                dz = yhat - yi \n",
    "                dw += xi*dz\n",
    "            J /= len(self.dataset.samples)\n",
    "            dw /= len(self.dataset.samples)\n",
    "            self.model.w = self.model.w - lr*dw\n",
    "                \n",
    "            accuracy = self.accuracy(self.dataset)\n",
    "                \n",
    "            if epoch%10 == 0:\n",
    "                    print('--> epoch=%d, accuracy=%.3f' %(epoch, accuracy))\n",
    "            costs.append(J)\n",
    "            accuracies.append(accuracy)\n",
    "                   \n",
    "        print(\"training complete\")\n",
    "        print(\"final accuracy: %.3f\" % (self.accuracy(self.dataset)))\n",
    "        costs = list(map(lambda t: np.mean(t), [np.array(costs)[i-10:i+11] for i in range(1, len(costs)-10)]))\n",
    "        accuracies = list(map(lambda t: np.mean(t), [np.array(accuracies)[i-10:i+11] for i in range(1, len(accuracies)-10)]))\n",
    "        \n",
    "        return (costs, accuracies)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Cat_Data:\n",
    "                            \n",
    "    def __init__(self, data_file_path='/Users/hugo/Documents/ArtificialIntelligence/Assignment 1/keio2019aia/data/assignment1/', data_file_name='cat_data.pkl'):\n",
    "                        \n",
    "        self.index = -1\n",
    "        with open('%s%s' % (data_file_path, data_file_name), mode='rb') as f:\n",
    "            cat_data = pkl.load(f)\n",
    "        self.samples = [(np.reshape(vector, vector.size), 1) for vector in self.standardize(cat_data['train']['cat'])]+[(np.reshape(vector, vector.size),0) for vector in self.standardize(cat_data['train']['no_cat'])]\n",
    "        random.shuffle(self.samples)\n",
    "        \n",
    "    def standardize(self, rgb_images):\n",
    "    \n",
    "        mean = np.mean(rgb_images, axis=(1, 2), keepdims=True)\n",
    "        std = np.std(rgb_images, axis=(1, 2), keepdims=True)\n",
    "    \n",
    "        return (rgb_images - mean) / std\n",
    "\n",
    "    def __iter__(self):\n",
    "\n",
    "        return self\n",
    "\n",
    "    def __next__(self):\n",
    "                        \n",
    "        self.index += 1\n",
    "        \n",
    "        if self.index > len(self.samples)-1:\n",
    "            self.index = -1\n",
    "            raise StopIteration\n",
    "        \n",
    "        return self.samples[self.index]\n",
    "        \n",
    "    def shuffle(self):\n",
    "    \n",
    "        random.shuffle(self.samples)\n",
    "        \n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training model on data...\n",
      "initial accuracy: 47.847\n",
      "--> epoch=10, accuracy=81.340\n",
      "--> epoch=20, accuracy=91.388\n",
      "--> epoch=30, accuracy=98.565\n",
      "--> epoch=40, accuracy=99.043\n",
      "--> epoch=50, accuracy=99.043\n",
      "--> epoch=60, accuracy=99.522\n",
      "--> epoch=70, accuracy=100.000\n",
      "--> epoch=80, accuracy=100.000\n",
      "--> epoch=90, accuracy=100.000\n",
      "--> epoch=100, accuracy=100.000\n",
      "--> epoch=110, accuracy=100.000\n",
      "--> epoch=120, accuracy=100.000\n",
      "--> epoch=130, accuracy=100.000\n",
      "--> epoch=140, accuracy=100.000\n",
      "--> epoch=150, accuracy=100.000\n",
      "--> epoch=160, accuracy=100.000\n",
      "--> epoch=170, accuracy=100.000\n",
      "--> epoch=180, accuracy=100.000\n",
      "--> epoch=190, accuracy=100.000\n",
      "--> epoch=200, accuracy=100.000\n",
      "--> epoch=210, accuracy=100.000\n",
      "--> epoch=220, accuracy=100.000\n",
      "--> epoch=230, accuracy=100.000\n",
      "--> epoch=240, accuracy=100.000\n",
      "--> epoch=250, accuracy=100.000\n",
      "--> epoch=260, accuracy=100.000\n",
      "--> epoch=270, accuracy=100.000\n",
      "--> epoch=280, accuracy=100.000\n",
      "--> epoch=290, accuracy=100.000\n",
      "--> epoch=300, accuracy=100.000\n",
      "--> epoch=310, accuracy=100.000\n",
      "--> epoch=320, accuracy=100.000\n",
      "--> epoch=330, accuracy=100.000\n",
      "--> epoch=340, accuracy=100.000\n",
      "--> epoch=350, accuracy=100.000\n",
      "--> epoch=360, accuracy=100.000\n",
      "--> epoch=370, accuracy=100.000\n",
      "--> epoch=380, accuracy=100.000\n",
      "--> epoch=390, accuracy=100.000\n",
      "--> epoch=400, accuracy=100.000\n",
      "--> epoch=410, accuracy=100.000\n",
      "--> epoch=420, accuracy=100.000\n",
      "--> epoch=430, accuracy=100.000\n",
      "--> epoch=440, accuracy=100.000\n",
      "--> epoch=450, accuracy=100.000\n",
      "--> epoch=460, accuracy=100.000\n",
      "--> epoch=470, accuracy=100.000\n",
      "--> epoch=480, accuracy=100.000\n",
      "--> epoch=490, accuracy=100.000\n",
      "--> epoch=500, accuracy=100.000\n",
      "training complete\n",
      "final accuracy: 100.000\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'pickle' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-250-dec697a67de1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m'__main__'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m     \u001b[0mmain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m<ipython-input-250-dec697a67de1>\u001b[0m in \u001b[0;36mmain\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m     \u001b[0mpickle_out\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"sonar_model.pkl\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"wb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m     \u001b[0mpickle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdump\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpickle_out\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m     \u001b[0mpickle_out\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'pickle' is not defined"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "\n",
    "    data = Cat_Data(data_file_path='/Users/hugo/Documents/ArtificialIntelligence/Assignment 1/keio2019aia/data/assignment1/', data_file_name='cat_data.pkl')\n",
    "    model = Cat_Model(dimension=(64*64*3), weights=None, bias=None, activation=sigmoid)  # specify the necessary arguments\n",
    "    trainer = Cat_Trainer(data, model)\n",
    "    trainer.train(lr=0.01, ne=500)\n",
    "    \n",
    "    pickle_out = open(\"sonar_model.pkl\",\"wb\")\n",
    "    pickle.dump(model, pickle_out)\n",
    "    pickle_out.close()\n",
    "\n",
    "if __name__ == '__main__':\n",
    "\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
